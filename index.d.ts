/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export function overwriteConfig(adminPort: number, configPath: string, keystoreConnectionUrl: string, bootstrapServerUrl: string, signalingServerUrl: string, allowedOrigin: string, useDpki: boolean, iceServerUrls?: Array<string> | undefined | null, keystoreInProcEnvironmentDir?: string | undefined | null): string
export function defaultConductorConfig(adminPort: number, conductorEnvironmentPath: string, keystoreConnectionUrl: string, bootstrapServerUrl: string, signalingServerUrl: string, allowedOrigin: string, useDpki: boolean, iceServerUrls?: Array<string> | undefined | null, keystoreInProcEnvironmentDir?: string | undefined | null): string
export interface HappAndUiHashes {
  happSha256: string
  webhappSha256?: string
  uiSha256?: string
}
export interface StoredHappPathAndHashes {
  happPath: string
  happSha256: string
  webhappSha256?: string
  uiSha256?: string
}
export function happBytesWithCustomProperties(happPath: string, properties: Record<string, string | undefined | null>): Promise<Array<number>>
/**
 * Saves a happ or a webhapp file. If a uis_dir is specified and it is a webhapp,
 * then the UI will be stored in [uis_dir]/[sha 256 of UI]/assets. If no uis_dir
 * is specified, only the happ file will be stored.
 */
export function saveHappOrWebhapp(happOrWebHappPath: string, happsDir: string, uisDir?: string | undefined | null): Promise<StoredHappPathAndHashes>
/**
 * Checks that the happ or webhapp is of the correct format
 * WARNING: The decoding and encoding of the happ bytes seems to affect happ's sha256 hash.
 */
export function validateHappOrWebhapp(happOrWebhappBytes: Array<number>): Promise<HappAndUiHashes>
export type JsWeRustHandler = WeRustHandler
export class WeRustHandler {
  constructor()
  static connect(keystoreUrl: string, passphrase: string): Promise<WeRustHandler>
  signZomeCall(payload: Array<number>, pubKey: Array<number>): Promise<Array<number>>
}
export type JsZomeCallSigner = ZomeCallSigner
export class ZomeCallSigner {
  constructor()
  static connect(connectionUrl: string, passphrase: string): Promise<ZomeCallSigner>
  signZomeCall(payload: Array<number>, pubKey: Array<number>): Promise<Array<number>>
}
